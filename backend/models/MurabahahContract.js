import mongoose from "mongoose";

const murabahahContractSchema = new mongoose.Schema(
  {
    // Contract Information
    contractNumber: {
      type: String,
      required: false, // Will be generated by pre-save middleware
      unique: true,
      trim: true,
    },
    title: {
      type: String,
      required: [true, "Contract title is required"],
      trim: true,
      maxlength: [200, "Title cannot exceed 200 characters"],
    },

    // Parties Involved
    customer: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Individual",
      required: [true, "Customer is required"],
    },
    serviceProvider: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "ServiceProvider",
      required: [true, "Service provider is required"],
    },
    capitalProvider: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "CapitalProvider",
      required: false, // Optional for individual user flow
    },

    // Vehicle Information
    vehicle: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Vehicle",
      required: [true, "Vehicle is required"],
    },
    vehicleDetails: {
      make: String,
      model: String,
      year: Number,
      variant: String,
      color: String,
      vin: String,
      engineNumber: String,
      registrationNumber: String,
    },

    // Financial Terms
    financialTerms: {
      purchasePrice: {
        type: Number,
        required: [true, "Purchase price is required"],
        min: [0, "Purchase price cannot be negative"],
      },
      downPayment: {
        type: Number,
        required: [true, "Down payment is required"],
        min: [0, "Down payment cannot be negative"],
      },
      financingAmount: {
        type: Number,
        required: [true, "Financing amount is required"],
        min: [0, "Financing amount cannot be negative"],
      },
      profitMargin: {
        type: Number,
        required: [true, "Profit margin is required"],
        min: [0, "Profit margin cannot be negative"],
      },
      totalAmount: {
        type: Number,
        required: [true, "Total amount is required"],
        min: [0, "Total amount cannot be negative"],
      },
      currency: {
        type: String,
        default: "USD",
        enum: ["USD", "EUR", "GBP", "SAR", "AED"],
      },
    },

    // Payment Schedule
    paymentSchedule: {
      installmentAmount: {
        type: Number,
        required: [true, "Installment amount is required"],
        min: [0, "Installment amount cannot be negative"],
      },
      numberOfInstallments: {
        type: Number,
        required: [true, "Number of installments is required"],
        min: [1, "Number of installments must be at least 1"],
      },
      installmentFrequency: {
        type: String,
        enum: ["monthly", "quarterly", "semi_annually", "annually"],
        default: "monthly",
      },
      firstPaymentDate: {
        type: Date,
        required: [true, "First payment date is required"],
      },
      lastPaymentDate: {
        type: Date,
        required: [true, "Last payment date is required"],
      },
    },

    // Contract Terms
    terms: {
      ownershipTransfer: {
        type: String,
        enum: ["immediate", "upon_completion", "gradual"],
        default: "upon_completion",
      },
      earlyPayment: {
        allowed: {
          type: Boolean,
          default: true,
        },
        discount: {
          type: Number,
          default: 0,
          min: [0, "Early payment discount cannot be negative"],
          max: [100, "Early payment discount cannot exceed 100%"],
        },
      },
      latePayment: {
        penalty: {
          type: Number,
          default: 0,
          min: [0, "Late payment penalty cannot be negative"],
        },
        gracePeriod: {
          type: Number,
          default: 7, // days
          min: [0, "Grace period cannot be negative"],
        },
      },
      defaultConditions: [String],
      specialConditions: [String],
    },

    // AI Analysis Results
    aiAnalysis: {
      kycScore: {
        type: Number,
        min: [0, "KYC score cannot be negative"],
        max: [100, "KYC score cannot exceed 100"],
      },
      creditScore: {
        type: Number,
        min: [300, "Credit score cannot be below 300"],
        max: [850, "Credit score cannot exceed 850"],
      },
      riskAssessment: {
        level: {
          type: String,
          enum: ["low", "medium", "high", "very_high"],
        },
        score: {
          type: Number,
          min: [0, "Risk score cannot be negative"],
          max: [100, "Risk score cannot exceed 100"],
        },
        factors: [String],
      },
      shariahCompliance: {
        isCompliant: {
          type: Boolean,
          default: true,
        },
        complianceScore: {
          type: Number,
          min: [0, "Compliance score cannot be negative"],
          max: [100, "Compliance score cannot exceed 100"],
        },
        complianceNotes: [String],
      },
      analysisDate: {
        type: Date,
        default: Date.now,
      },
    },

    // Contract Status
    status: {
      type: String,
      enum: [
        "draft",
        "pending_approval",
        "scholar_review",
        "financial_review",
        "approved",
        "signed",
        "active",
        "completed",
        "defaulted",
        "cancelled",
      ],
      default: "draft",
    },

    // Review Process
    reviews: {
      scholar: {
        reviewer: {
          type: mongoose.Schema.Types.ObjectId,
          ref: "Scholar",
        },
        status: {
          type: String,
          enum: [
            "pending",
            "in_progress",
            "approved",
            "rejected",
            "needs_revision",
          ],
          default: "pending",
        },
        reviewDate: Date,
        comments: String,
        proofOfFaith: {
          issued: {
            type: Boolean,
            default: false,
          },
          issuedAt: Date,
          certificateUrl: String,
        },
      },
      financial: {
        reviewer: {
          type: mongoose.Schema.Types.ObjectId,
          ref: "CapitalProvider",
        },
        status: {
          type: String,
          enum: [
            "pending",
            "in_progress",
            "approved",
            "rejected",
            "counter_offer",
          ],
          default: "pending",
        },
        reviewDate: Date,
        comments: String,
        offerLetter: {
          issued: {
            type: Boolean,
            default: false,
          },
          issuedAt: Date,
          documentUrl: String,
        },
      },
    },

    // Execution Details
    execution: {
      signedAt: Date,
      signedBy: {
        customer: {
          signature: String,
          signedAt: Date,
        },
        serviceProvider: {
          signature: String,
          signedAt: Date,
        },
        capitalProvider: {
          signature: String,
          signedAt: Date,
        },
      },
      effectiveDate: Date,
      completionDate: Date,
    },

    // Documents
    documents: [
      {
        type: {
          type: String,
          enum: [
            "contract_draft",
            "signed_contract",
            "proof_of_faith",
            "offer_letter",
            "vehicle_documents",
            "insurance",
            "other",
          ],
        },
        name: String,
        url: String,
        uploadedAt: {
          type: Date,
          default: Date.now,
        },
        uploadedBy: {
          type: mongoose.Schema.Types.ObjectId,
          refPath: "documents.uploadedByType",
        },
        uploadedByType: {
          type: String,
          enum: [
            "Individual",
            "ServiceProvider",
            "CapitalProvider",
            "Scholar",
            "Admin",
          ],
        },
      },
    ],

    // Payment History
    paymentHistory: [
      {
        installmentNumber: Number,
        dueDate: Date,
        amount: Number,
        paidAmount: Number,
        paidAt: Date,
        status: {
          type: String,
          enum: ["pending", "paid", "overdue", "partial"],
        },
        paymentMethod: String,
        transactionId: String,
      },
    ],

    // Metadata
    tags: [String],
    notes: [String],

    // Timestamps
    lastModified: Date,
  },
  {
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
  }
);

// Indexes for better performance
murabahahContractSchema.index({ contractNumber: 1 });
murabahahContractSchema.index({ customer: 1 });
murabahahContractSchema.index({ serviceProvider: 1 });
murabahahContractSchema.index({ capitalProvider: 1 });
murabahahContractSchema.index({ vehicle: 1 });
murabahahContractSchema.index({ status: 1 });
murabahahContractSchema.index({ createdAt: -1 });

// Virtual for remaining balance
murabahahContractSchema.virtual("remainingBalance").get(function () {
  if (!this.paymentHistory || this.paymentHistory.length === 0) {
    return this.financialTerms.totalAmount;
  }

  const totalPaid = this.paymentHistory.reduce(
    (sum, payment) => sum + (payment.paidAmount || 0),
    0
  );
  return this.financialTerms.totalAmount - totalPaid;
});

// Virtual for next payment due
murabahahContractSchema.virtual("nextPaymentDue").get(function () {
  if (!this.paymentHistory || this.paymentHistory.length === 0) {
    return this.paymentSchedule.firstPaymentDate;
  }

  const lastPaidInstallment = Math.max(
    ...this.paymentHistory.map((p) => p.installmentNumber)
  );
  if (lastPaidInstallment >= this.paymentSchedule.numberOfInstallments) {
    return null; // All payments completed
  }

  // Calculate next payment date based on frequency
  const nextInstallmentNumber = lastPaidInstallment + 1;
  const firstPaymentDate = new Date(this.paymentSchedule.firstPaymentDate);

  let nextPaymentDate = new Date(firstPaymentDate);
  if (this.paymentSchedule.installmentFrequency === "monthly") {
    nextPaymentDate.setMonth(
      firstPaymentDate.getMonth() + nextInstallmentNumber - 1
    );
  } else if (this.paymentSchedule.installmentFrequency === "quarterly") {
    nextPaymentDate.setMonth(
      firstPaymentDate.getMonth() + (nextInstallmentNumber - 1) * 3
    );
  } else if (this.paymentSchedule.installmentFrequency === "semi_annually") {
    nextPaymentDate.setMonth(
      firstPaymentDate.getMonth() + (nextInstallmentNumber - 1) * 6
    );
  } else if (this.paymentSchedule.installmentFrequency === "annually") {
    nextPaymentDate.setFullYear(
      firstPaymentDate.getFullYear() + nextInstallmentNumber - 1
    );
  }

  return nextPaymentDate;
});

// Pre-save middleware
murabahahContractSchema.pre("save", function (next) {
  // Always generate contract number
  if (!this.contractNumber) {
    const timestamp = Date.now().toString(36);
    const random = Math.random().toString(36).substr(2, 5);
    this.contractNumber = `MUR-${timestamp}-${random}`.toUpperCase();
  }

  // Calculate financing amount only if not already set
  if (
    this.financialTerms.purchasePrice &&
    this.financialTerms.downPayment &&
    !this.financialTerms.financingAmount
  ) {
    this.financialTerms.financingAmount =
      this.financialTerms.purchasePrice - this.financialTerms.downPayment;
  }

  // Calculate total amount only if not already set
  if (
    this.financialTerms.financingAmount &&
    this.financialTerms.profitMargin &&
    !this.financialTerms.totalAmount
  ) {
    this.financialTerms.totalAmount =
      this.financialTerms.financingAmount + this.financialTerms.profitMargin;
  }

  // Calculate installment amount only if not already set
  if (
    this.financialTerms.totalAmount &&
    this.paymentSchedule.numberOfInstallments &&
    !this.paymentSchedule.installmentAmount
  ) {
    this.paymentSchedule.installmentAmount =
      this.financialTerms.totalAmount /
      this.paymentSchedule.numberOfInstallments;
  }

  // Calculate last payment date only if not already set
  if (
    this.paymentSchedule.firstPaymentDate &&
    this.paymentSchedule.numberOfInstallments &&
    !this.paymentSchedule.lastPaymentDate
  ) {
    const firstPaymentDate = new Date(this.paymentSchedule.firstPaymentDate);
    let lastPaymentDate = new Date(firstPaymentDate);

    if (this.paymentSchedule.installmentFrequency === "monthly") {
      lastPaymentDate.setMonth(
        firstPaymentDate.getMonth() +
          this.paymentSchedule.numberOfInstallments -
          1
      );
    } else if (this.paymentSchedule.installmentFrequency === "quarterly") {
      lastPaymentDate.setMonth(
        firstPaymentDate.getMonth() +
          (this.paymentSchedule.numberOfInstallments - 1) * 3
      );
    } else if (this.paymentSchedule.installmentFrequency === "semi_annually") {
      lastPaymentDate.setMonth(
        firstPaymentDate.getMonth() +
          (this.paymentSchedule.numberOfInstallments - 1) * 6
      );
    } else if (this.paymentSchedule.installmentFrequency === "annually") {
      lastPaymentDate.setFullYear(
        firstPaymentDate.getFullYear() +
          this.paymentSchedule.numberOfInstallments -
          1
      );
    }

    this.paymentSchedule.lastPaymentDate = lastPaymentDate;
  }

  this.lastModified = new Date();
  next();
});

// Static method to find active contracts
murabahahContractSchema.statics.findActive = function () {
  return this.find({
    status: { $in: ["active", "signed"] },
  });
};

// Static method to find contracts by customer
murabahahContractSchema.statics.findByCustomer = function (customerId) {
  return this.find({ customer: customerId }).sort({ createdAt: -1 });
};

// Instance method to approve by scholar
murabahahContractSchema.methods.approveByScholar = function (
  scholarId,
  comments = ""
) {
  this.reviews.scholar.status = "approved";
  this.reviews.scholar.reviewer = scholarId;
  this.reviews.scholar.reviewDate = new Date();
  this.reviews.scholar.comments = comments;
  this.reviews.scholar.proofOfFaith.issued = true;
  this.reviews.scholar.proofOfFaith.issuedAt = new Date();

  if (this.status === "scholar_review") {
    this.status = "financial_review";
  }

  return this.save();
};

// Instance method to approve by capital provider
murabahahContractSchema.methods.approveByCapitalProvider = function (
  capitalProviderId,
  comments = ""
) {
  this.reviews.financial.status = "approved";
  this.reviews.financial.reviewer = capitalProviderId;
  this.reviews.financial.reviewDate = new Date();
  this.reviews.financial.comments = comments;
  this.reviews.financial.offerLetter.issued = true;
  this.reviews.financial.offerLetter.issuedAt = new Date();

  if (this.status === "financial_review") {
    this.status = "approved";
  }

  return this.save();
};

// Instance method to record payment
murabahahContractSchema.methods.recordPayment = function (
  installmentNumber,
  amount,
  paymentMethod,
  transactionId
) {
  const payment = {
    installmentNumber,
    dueDate: this.nextPaymentDue,
    amount: this.paymentSchedule.installmentAmount,
    paidAmount: amount,
    paidAt: new Date(),
    status:
      amount >= this.paymentSchedule.installmentAmount ? "paid" : "partial",
    paymentMethod,
    transactionId,
  };

  this.paymentHistory.push(payment);

  // Check if all payments are completed
  const totalPaid = this.paymentHistory.reduce(
    (sum, p) => sum + (p.paidAmount || 0),
    0
  );
  if (totalPaid >= this.financialTerms.totalAmount) {
    this.status = "completed";
    this.execution.completionDate = new Date();
  }

  return this.save();
};

export default mongoose.model("MurabahahContract", murabahahContractSchema);
